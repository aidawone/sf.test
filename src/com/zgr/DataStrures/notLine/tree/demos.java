package com.zgr.DataStrures.notLine.tree;

import java.io.*;
import java.util.*;

/**
 * @Author: aidawone
 * @Description:
 * @Date: Create in 20:23 2020/1/21
 */
public class demos {
    public static void main(String[] args) {

        //??????????
//		String srcFile = "d://Uninstall.xml";
//		String dstFile = "d://Uninstall.zip";
//
//		zipFile(srcFile, dstFile);
//		System.out.println("??????ok~~");


        //?????????
        String zipFile = "D://b.zip";
        String dstFile = "D://b2.jpg";
        unZipFile(zipFile, dstFile);
        System.out.println("??????");

		/*
		String content = "i like like like java do you like a java";
		byte[] contentBytes = content.getBytes();
		System.out.println(contentBytes.length); //40

		byte[] huffmanCodesBytes= huffmanZip(contentBytes);
		System.out.println("??????????:" + Arrays.toString(huffmanCodesBytes) + " ????= " + huffmanCodesBytes.length);


		//???????byteToBitString????
		//System.out.println(byteToBitString((byte)1));
		byte[] sourceBytes = decode(huffmanCodes, huffmanCodesBytes);

		System.out.println("??????????=" + new String(sourceBytes)); // "i like like like java do you like a java"
		*/


        //????? ??????????(????)
        //???????
		/*
		List<Nodea> nodes = getNodes(contentBytes);
		System.out.println("nodes=" + nodes);

		//????????????????????
		System.out.println("???????");
		Nodea huffmanTreeRoot = createHuffmanTree(nodes);
		System.out.println("??????");
		huffmanTreeRoot.preOrder();

		//????????????????????????????
		Map<Byte, String> huffmanCodes = getCodes(huffmanTreeRoot);
		System.out.println("~??????????????= " + huffmanCodes);

		//????
		byte[] huffmanCodeBytes = zip(contentBytes, huffmanCodes);
		System.out.println("huffmanCodeBytes=" + Arrays.toString(huffmanCodeBytes));//17

		//????huffmanCodeBytes ???? */


    }

    //???????????????????????????

    /**
     * @param zipFile ???????????
     * @param dstFile ?????????????????
     */
    public static void unZipFile(String zipFile, String dstFile) {

        //?????????????
        InputStream is = null;
        //?????????????????
        ObjectInputStream ois = null;
        //??????????????
        OutputStream os = null;
        try {
            //?????????????
            is = new FileInputStream(zipFile);
            //?????????  is???????????????
            ois = new ObjectInputStream(is);
            //???byte????  huffmanBytes
            byte[] huffmanBytes = (byte[]) ois.readObject();
            //?????????????
            Map<Byte, String> huffmanCodes = (Map<Byte, String>) ois.readObject();

            //????
            byte[] bytes = decode(huffmanCodes, huffmanBytes);
            //??bytes ??????????????
            os = new FileOutputStream(dstFile);
            //??????? dstFile ???
            os.write(bytes);
        } catch (Exception e) {
            // TODO: handle exception
            System.out.println(e.getMessage());
        } finally {

            try {
                os.close();
                ois.close();
                is.close();
            } catch (Exception e2) {
                // TODO: handle exception
                System.out.println(e2.getMessage());
            }

        }
    }

    //?????????????????????????

    /**
     * @param srcFile ???????????????????????
     * @param dstFile ???????????????????????
     */
    public static void zipFile(String srcFile, String dstFile) {

        //?????????
        OutputStream os = null;
        ObjectOutputStream oos = null;
        //???????????????
        FileInputStream is = null;
        try {
            //???????????????
            is = new FileInputStream(srcFile);
            //??????????????????????byte[]
            byte[] b = new byte[is.available()];
            //??????
            is.read(b);
            //???????????
            byte[] huffmanBytes = huffmanZip(b);
            //??????????????, ?????????
            os = new FileOutputStream(dstFile);
            //???????????????????????ObjectOutputStream
            oos = new ObjectOutputStream(os);
            //?? ????????????????????????????
            oos.writeObject(huffmanBytes); //???????
            //??????????????????????? ???????????????????????????????
            //????????????????? ??????????
            oos.writeObject(huffmanCodes);


        } catch (Exception e) {
            // TODO: handle exception
            System.out.println(e.getMessage());
        } finally {
            try {
                is.close();
                oos.close();
                os.close();
            } catch (Exception e) {
                // TODO: handle exception
                System.out.println(e.getMessage());
            }
        }

    }

    //??????????
    //???
    //1. ??huffmanCodeBytes [-88, -65, -56, -65, -56, -65, -55, 77, -57, 6, -24, -14, -117, -4, -60, -90, 28]
    //   ????????? ???????????????????????? "1010100010111..."
    //2.  ???????????????????????? "1010100010111..." =?? ???? ?????????  =?? "i like like like java do you like a java"


    //????????????????????????????

    /**
     * @param huffmanCodes ?????????? map
     * @param huffmanBytes ????????????????????
     * @return ???????????????????????
     */
    private static byte[] decode(Map<Byte, String> huffmanCodes, byte[] huffmanBytes) {

        //1. ???? huffmanBytes ????? ???????????? ?? ??? 1010100010111...
        StringBuilder stringBuilder = new StringBuilder();
        //??byte??????????????????
        for (int i = 0; i < huffmanBytes.length; i++) {
            byte b = huffmanBytes[i];
            //??????????????????
            boolean flag = (i == huffmanBytes.length - 1);
            stringBuilder.append(byteToBitString(!flag, b));
        }
        //??????????????????????????????
        //????????????????????????????? a->100 100->a
        Map<String, Byte> map = new HashMap<String, Byte>();
        for (Map.Entry<Byte, String> entry : huffmanCodes.entrySet()) {
            map.put(entry.getValue(), entry.getKey());
        }

        //???????????????byte
        List<Byte> list = new ArrayList<>();
        //i ???????????????,??? stringBuilder
        for (int i = 0; i < stringBuilder.length(); ) {
            int count = 1; // ?????????
            boolean flag = true;
            Byte b = null;

            while (flag) {
                //1010100010111...
                //????????? key 1
                String key = stringBuilder.substring(i, i + count);//i ????????count?????????????????
                b = map.get(key);
                if (b == null) {//?????????
                    count++;
                } else {
                    //???
                    flag = false;
                }
            }
            list.add(b);
            i += count;//i ???????? count
        }
        //??for?????????????list?????????????????  "i like like like java do you like a java"
        //??list ???????????byte[] ??????
        byte b[] = new byte[list.size()];
        for (int i = 0; i < b.length; i++) {
            b[i] = list.get(i);
        }
        return b;

    }

    /**
     * ?????byte ??????????????????, ???????????????????????Java???? ??????????????????
     *
     * @param b    ????? byte
     * @param flag ????????????????????true ?????????????????????false???????, ???????????????????K????
     * @return ???b ?????????????????????????????????
     */
    private static String byteToBitString(boolean flag, byte b) {
        //?????????? b
        int temp = b; //?? b ??? int
        //???????????????????????
        if (flag) {
            temp |= 256; //?????? 256  1 0000 0000  | 0000 0001 => 1 0000 0001
        }
        String str = Integer.toBinaryString(temp); //???????temp??????????????
        if (flag) {
            return str.substring(str.length() - 8);
        } else {
            return str;
        }
    }

    //??????????????????????????????????????????.

    /**
     * @param bytes ?????????????????????
     * @return ????? ????????????????????(??????????)
     */
    private static byte[] huffmanZip(byte[] bytes) {
        List<Nodea> nodes = getNodes(bytes);
        //???? nodes ????????????
        Nodea huffmanTreeRoot = createHuffmanTree(nodes);
        //?????????????(???? ???????)
        Map<Byte, String> huffmanCodes = getCodes(huffmanTreeRoot);
        //????????????????????????????????????????????
        byte[] huffmanCodeBytes = zip(bytes, huffmanCodes);
        return huffmanCodeBytes;
    }


    //?????????????????????????byte[] ????????????????????????????????????? ??????byte[]

    /**
     * @param bytes        ????????????????? byte[]
     * @param huffmanCodes ?????????????map
     * @return ???????????????? byte[]
     * ?????? String content = "i like like like java do you like a java"; =?? byte[] contentBytes = content.getBytes();
     * ??????? ????? "1010100010111111110010001011111111001000101111111100100101001101110001110000011011101000111100101000101111111100110001001010011011100"
     * => ????? byte[] huffmanCodeBytes  ???? 8???????? byte,???? huffmanCodeBytes
     * huffmanCodeBytes[0] =  10101000(????) => byte  [???  10101000=> 10101000 - 1 => 10100111(????)=> 11011000= -88 ]
     * huffmanCodeBytes[1] = -88
     */
    private static byte[] zip(byte[] bytes, Map<Byte, String> huffmanCodes) {

        //1.???? huffmanCodes ??  bytes ???  ??????????????????
        StringBuilder stringBuilder = new StringBuilder();
        //????bytes ????
        for (byte b : bytes) {
            stringBuilder.append(huffmanCodes.get(b));
        }

        //System.out.println("???? stringBuilder~~~=" + stringBuilder.toString());

        //?? "1010100010111111110..." ??? byte[]

        //??????  byte[] huffmanCodeBytes ????
        //???? int len = (stringBuilder.length() + 7) / 8;
        int len;
        if (stringBuilder.length() % 8 == 0) {
            len = stringBuilder.length() / 8;
        } else {
            len = stringBuilder.length() / 8 + 1;
        }
        //???? ????????? byte????
        byte[] huffmanCodeBytes = new byte[len];
        int index = 0;//?????????byte
        for (int i = 0; i < stringBuilder.length(); i += 8) { //??????8????????byte,??????? +8
            String strByte;
            if (i + 8 > stringBuilder.length()) {//????8??
                strByte = stringBuilder.substring(i);
            } else {
                strByte = stringBuilder.substring(i, i + 8);
            }
            //??strByte ??????byte,???? huffmanCodeBytes
            huffmanCodeBytes[index] = (byte) Integer.parseInt(strByte, 2);
            index++;
        }
        return huffmanCodeBytes;
    }

    //???????????????????????
    //???:
    //1. ???????????????? Map<Byte,String> ???
    //   ??????????????{32=01, 97=100, 100=11000, 117=11001, 101=1110, 118=11011, 105=101, 121=11010, 106=0010, 107=1111, 108=000, 111=0011}
    static Map<Byte, String> huffmanCodes = new HashMap<Byte, String>();
    //2. ?????????????????????????????, ???????StringBuilder ????????????????
    static StringBuilder stringBuilder = new StringBuilder();


    //?????????????????? getCodes
    private static Map<Byte, String> getCodes(Nodea root) {
        if (root == null) {
            return null;
        }
        //????root????????
        getCodes(root.left, "0", stringBuilder);
        //????root????????
        getCodes(root.right, "1", stringBuilder);
        return huffmanCodes;
    }

    /**
     * ????????????Nodea????????????????????????????????huffmanCodes????
     *
     * @param Nodea         ??????
     * @param code          ?????? ???????? 0, ?????? 1
     * @param stringBuilder ???????????
     */
    private static void getCodes(Nodea Nodea, String code, StringBuilder stringBuilder) {
        StringBuilder stringBuilder2 = new StringBuilder(stringBuilder);
        //??code ???? stringBuilder2
        stringBuilder2.append(code);
        if (Nodea != null) { //???Nodea == null??????
            //??????node ???????????????
            if (Nodea.data == null) { //???????
                //??????
                //??????
                getCodes(Nodea.left, "0", stringBuilder2);
                //??????
                getCodes(Nodea.right, "1", stringBuilder2);
            } else { //?????????????
                //???????????????????
                huffmanCodes.put(Nodea.data, stringBuilder2.toString());
            }
        }
    }

    //???????????
    private static void preOrder(Nodea root) {
        if (root != null) {
            root.preOrder();
        } else {
            System.out.println("??????????");
        }
    }

    /**
     * @param bytes ???????????
     * @return ???????? List ???   [Nodea[date=97 ,weight = 5], Nodea[]date=32,weight = 9]......],
     */
    private static List<Nodea> getNodes(byte[] bytes) {

        //1???????ArrayList
        ArrayList<Nodea> nodes = new ArrayList<Nodea>();

        //???? bytes , ??? ????byte????????->map[key,value]
        Map<Byte, Integer> counts = new HashMap<>();
        for (byte b : bytes) {
            Integer count = counts.get(b);
            if (count == null) { // Map???????????????,?????
                counts.put(b, 1);
            } else {
                counts.put(b, count + 1);
            }
        }

        //?????????????????Nodea ??????????nodes????
        //????map
        for (Map.Entry<Byte, Integer> entry : counts.entrySet()) {
            nodes.add(new Nodea(entry.getKey(), entry.getValue()));
        }
        return nodes;

    }

    //???????List ???????????????
    private static Nodea createHuffmanTree(List<Nodea> nodes) {

        while (nodes.size() > 1) {
            //????, ????????
            Collections.sort(nodes);
            //???????????????????
            Nodea leftNode = nodes.get(0);
            //???????????????????
            Nodea rightNode = nodes.get(1);
            //????????????????,???????? ???data, ?????
            Nodea parent = new Nodea(null, leftNode.weight + rightNode.weight);
            parent.left = leftNode;
            parent.right = rightNode;

            //?????????????????????nodes???
            nodes.remove(leftNode);
            nodes.remove(rightNode);
            //?????????????????nodes
            nodes.add(parent);

        }
        //nodes ??????????????????????
        return nodes.get(0);

    }


}


//????Nodea ,?????????
class Nodea implements Comparable<Nodea> {
    Byte data; // ???????(???)????????'a' => 97 ' ' => 32
    int weight; //??, ??????????????
    Nodea left;//
    Nodea right;

    public Nodea(Byte data, int weight) {

        this.data = data;
        this.weight = weight;
    }

    @Override
    public int compareTo(Nodea o) {
        // ????????????
        return this.weight - o.weight;
    }

    public String toString() {
        return "Nodea [data = " + data + " weight=" + weight + "]";
    }

    //??????
    public void preOrder() {
        System.out.println(this);
        if (this.left != null) {
            this.left.preOrder();
        }
        if (this.right != null) {
            this.right.preOrder();
        }
    }
}
